#FIRST WAY

def draw_line(width, edge, filling):
    print(filling.join([edge] * (width + 1)))


def display_winner(player):
    if player == 0:
        print("Tie")
    else:
        print("Player " + str(player) + " wins!")

def check_row_winner(row):
    """
    Return the player number that wins for that row.
    If there is no winner, return 0.
    """
    if row[0] == row[1] and row[1] == row[2]:
        return row[0]
    return 0

def get_col(game, col_number):
    return [game[x][col_number] for x in range(3)]

def get_row(game, row_number):
    return game[row_number]

def check_winner(game):
    game_slices = []
    for index in range(3):
        game_slices.append(get_row(game, index))
        game_slices.append(get_col(game, index))

    # check diagonals
    down_diagonal = [game[x][x] for x in range(3)]
    up_diagonal = [game[0][2], game[1][1], game[2][0]]
    game_slices.append(down_diagonal)
    game_slices.append(up_diagonal)

    for game_slice in game_slices:
        winner = check_row_winner(game_slice)
        if winner != 0:
            return winner

    return winner

def start_game():
    return [[0, 0, 0] for x in range(3)]

def display_game(game):
    d = {2: "O", 1: "X", 0: "_"}
    draw_line(3, " ", "_")
    for row_num in range(3):
        new_row = []
        for col_num in range(3):
            new_row.append(d[game[row_num][col_num]])
        print("|" + "|".join(new_row) + "|")


def add_piece(game, player, row, column):
    """
    game: game state
    player: player number
    row: 0-index row
    column: 0-index column
    """
    game[row][column] = player
    return game

def check_space_empty(game, row, column):
    return game[row][column] == 0

def convert_input_to_coordinate(user_input):
    return user_input - 1

def switch_player(player):
    if player == 1:
        return 2
    else:
        return 1

def moves_exist(game):
    for row_num in range(3):
        for col_num in range(3):
            if game[row_num][col_num] == 0:
                return True
    return False

if __name__ == '__main__':
    game = start_game()
    display_game(game)
    player = 1
    winner = 0  # the winner is not yet defined

    # go on forever
    while winner == 0 and moves_exist(game):
        print("Currently player: " + str(player))
        available = False
        while not available:
            row = convert_input_to_coordinate(int(input("Scegli una riga: ")))
            column = convert_input_to_coordinate(int(input("Scegli una colonna: ")))
            available = check_space_empty(game, row, column)
        game = add_piece(game, player, row, column)
        display_game(game)
        player = switch_player(player)
        winner = check_winner(game)
    display_winner(winner)
    
#SECOND WAY

def print_horiz_line():
    print(" --- " * board_size)

def print_vert_line():
	print("|    " * (board_size + 1))

if __name__ == "__main__":
	board_size = int(input("What size of game board? "))

for i in range(board_size):
  print_horiz_line()
  print_vert_line()'''
'''
game = [[1,2,2],
        [2,2,1],
        [2,1,2]]

def ottieni_vincitore(x,y):
	if game [x][y] == 1:
		return "Vince il giocatore 1"
	elif game [x][y] == 2:
		return "Vince il giocatore 2"

def vincitore():
	for i in range(0,3):
		#RIGHE
		if game[i][0] == game[i][1] == game[i][2]:
			if game [i][0] != 0:
				return(ottieni_vincitore(i,0))
		#COLONNE
		elif game[0][i] == game[1][i] == game[2][i]:
			if game [0][i] != 0:
				return(ottieni_vincitore(0,i))
		#PRIMA DIAGONALE
		elif game[0][0] == game[1][1] == game[2][2]:
			if game [0][0] != 0:
				return(ottieni_vincitore(0,0))
        #SECONDA DIAGONALE
		elif game[0][2] == game[1][1] == game[2][0]:
			if game [0][2] != 0:
				return(ottieni_vincitore(0,2))
		else:
		    return("Nessun vincitore")
print(vincitore())




gameboard = [(['.']*3) for i in range(3)]

row_col = [0]
turn = 1

def input_valid(values):
    if len(values) != 2:
        print ("Input must be two numbers in format row,col e.g.  1,2 ")
        return 0
    try:
        if (1 <= int(values[0]) <= 3) and (1 <= int(values[1]) <= 3):
            if gameboard[int(values[0])-1][int(values[1])-1] != '.':
                print ("Position on board already taken.")
                return 0
            return 1
        else:
            print ("Input values must be numbers between 1 and 3 (inclusive)")
            return 0
    except ValueError:
        print ("Input values must be numbers between 1 and 3 (inclusive)")
        return 0

def draw_board(values, player):
    gameboard[int(values[0])-1][int(values[1])-1] = player

    for row in gameboard:
    	print (row)

def game_over():
    searcht = '.'
#RIGHE
    for i in range(3):
        if len(set(gameboard[i])) == 1:
            if gameboard[i][1] == '.':
                continue
            elif gameboard[i][1] == 'X':
                print ("Game over - Player 1 wins")
            else:
                print ("Game over - Player 2 wins")
            return 1
#COLONNE
    for i in range(3):
        if gameboard[0][i] == gameboard[1][i] == gameboard[2][i]:
            if gameboard[0][i] == '.':
                continue
            elif gameboard[0][i] == 'X':
                print ("Game over - Player 1 wins")
            else:
                print ("Game over - Player 2 wins")
            return 1

#DIAGONALI
    if (gameboard[0][0] == gameboard[1][1] == gameboard[2][2]) or (gameboard[0][2] == gameboard[1][1] == gameboard[2][0]): 
        if gameboard[1][1] == 'X':
            print ("Game over - Player 1 wins")
        elif gameboard[1][1] == 'O':
            print ("Game over - Player 2 wins")
        else:
            return 0
        return 1

    for sublist in gameboard:
        if searcht in sublist:
            return 0

    print ("Game over - the board is filled")
    return 1


while not game_over():
    piece = '.'

    while not input_valid(row_col):
        player = turn % 2
        if player == 0:
        	player = 2
        	piece = 'O'
        else:
            piece = 'X'
        p1 = input('Player ' + str(player) +' input: ')
        row_col = p1.split(",")

    draw_board(row_col, piece)

    row_col = [0]
    turn += 1

#THIRD WAY

import itertools
from colorama import Fore, Back, Style, init

init()

def win(current_game):

    def all_same(l):
        if l.count(l[0]) == len(l) and l[0] != 0:
            return True
        else:
            return False

    # horizontal
    for row in game:
        print(row)
        if all_same(row):
            print(f"Player {row[0]} is the winner horizontally!")
            return True

    # vertical
    for col in range(len(game[0])):
        check = []
        for row in game:
            check.append(row[col])
        if all_same(check):
            print(f"Player {check[0]} is the winner vertically!")
            return True

    # / diagonal
    diags = []
    for idx, reverse_idx in enumerate(reversed(range(len(game)))):
        diags.append(game[idx][reverse_idx])

    if all_same(diags):
        print(f"Player {diags[0]} has won Diagonally (/)")
        return True

    # \ diagonal
    diags = []
    for ix in range(len(game)):
        diags.append(game[ix][ix])

    if all_same(diags):
        print(f"Player {diags[0]} has won Diagonally (\\)")
        return True

    return False


def game_board(game_map, player=0, row=0, column=0, just_display=False):
    
    try:
        if game_map[row][column] != 0:
            print("This space is occupied, try another!")
            return False

        print("   "+"  ".join([str(i) for i in range(len(game_map))]))
        if not just_display:
            game_map[row][column] = player


        for count, row in enumerate(game_map):
            colored_row = ""
            for item in row:
                if item == 0:
                    colored_row += "   "
                elif item == 1:
                    colored_row += Fore.GREEN + " X " + Style.RESET_ALL
                elif item  == 2:
                    colored_row += Fore.MAGENTA + " O " + Style.RESET_ALL
            print(count, colored_row)
        

        return game_map
    except IndexError:
        print("Did you attempt to play a row or column outside the range of 0,1 or 2? (IndexError)")
        return False
    except Exception as e:
        print(str(e))
        return False


play = True
players = [1, 2]
while play:
    game = [[0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]]

    game_won = False
    player_cycle = itertools.cycle([1, 2])
    game_board(game, just_display=True)
    while not game_won:
        current_player = next(player_cycle)
        played = False
        while not played:
            print(f"Player: {current_player}")
            column_choice = int(input("Which column? "))
            row_choice = int(input("Which row? "))
            played = game_board(game, player=current_player, row=row_choice, column=column_choice)

        if win(game):
            game_won = True
            again = input("The game is over, would you like to play again?")
            if again.lower() == "yes":
                print("Restarting!")
            elif again.lower() == "no":
                print("Byeeeee!!!")
                play = False
            else:
                print("Not a valid answer, but... c ya!")
                play = False
